"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/courses/new/page",{

/***/ "(app-pages-browser)/./src/lib/courseService.ts":
/*!**********************************!*\
  !*** ./src/lib/courseService.ts ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CourseService: function() { return /* binding */ CourseService; }\n/* harmony export */ });\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var firebase_storage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/storage */ \"(app-pages-browser)/./node_modules/firebase/storage/dist/esm/index.esm.js\");\n/* harmony import */ var _firebase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./firebase */ \"(app-pages-browser)/./src/lib/firebase.ts\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js\");\n\n\n\n\nconst COLLECTION_NAME = \"courses\";\n// Helper function to clean data before sending to Firestore\nconst cleanCourseData = (data)=>{\n    const cleaned = {};\n    for (const [key, value] of Object.entries(data)){\n        // Skip undefined values and functions\n        if (value !== undefined && typeof value !== \"function\") {\n            // Handle different data types appropriately\n            if (value === null) {\n                // Convert null to appropriate default values\n                if ([\n                    \"paymentLink\",\n                    \"backgroundImage\",\n                    \"certificateImage\",\n                    \"globalStatus\",\n                    \"startDate\"\n                ].includes(key)) {\n                    cleaned[key] = \"\";\n                } else if ([\n                    \"learningOutcomes\",\n                    \"features\",\n                    \"skills\",\n                    \"requirements\",\n                    \"module\",\n                    \"highlights\",\n                    \"project\",\n                    \"programFor\"\n                ].includes(key)) {\n                    cleaned[key] = [];\n                } else if ([\n                    \"rating\",\n                    \"totalRatings\",\n                    \"enrolledStudents\",\n                    \"price\",\n                    \"originalPrice\"\n                ].includes(key)) {\n                    cleaned[key] = 0;\n                } else {\n                    cleaned[key] = \"\";\n                }\n            } else if (Array.isArray(value)) {\n                // Ensure arrays are properly formatted\n                cleaned[key] = value.filter((item)=>item !== null && item !== undefined);\n            } else if (typeof value === \"string\") {\n                // Trim strings and handle empty values\n                cleaned[key] = value.trim();\n            } else if (typeof value === \"object\" && value.constructor === Object) {\n                // Recursively clean nested objects\n                cleaned[key] = cleanCourseData(value);\n            } else {\n                cleaned[key] = value;\n            }\n        }\n    }\n    return cleaned;\n};\n// Helper function to validate course data\nconst validateCourseData = (courseData)=>{\n    const errors = [];\n    if (!courseData.title || courseData.title.trim().length === 0) {\n        errors.push(\"Title is required\");\n    }\n    if (!courseData.shortDescription || courseData.shortDescription.trim().length === 0) {\n        errors.push(\"Short description is required\");\n    }\n    if (!courseData.category || courseData.category.trim().length === 0) {\n        errors.push(\"Category is required\");\n    }\n    if (!courseData.level || ![\n        \"beginner\",\n        \"intermediate\",\n        \"advanced\"\n    ].includes(courseData.level)) {\n        errors.push(\"Valid level is required (beginner, intermediate, or advanced)\");\n    }\n    if (!courseData.language || courseData.language.trim().length === 0) {\n        errors.push(\"Language is required\");\n    }\n    if (!courseData.duration || courseData.duration.trim().length === 0) {\n        errors.push(\"Duration is required\");\n    }\n    if (!courseData.hours || courseData.hours.trim().length === 0) {\n        errors.push(\"Hours is required\");\n    }\n    if (courseData.price < 0 || isNaN(courseData.price)) {\n        errors.push(\"Price must be a valid number (0 or greater)\");\n    }\n    if (courseData.originalPrice < 0 || isNaN(courseData.originalPrice)) {\n        errors.push(\"Original price must be a valid number (0 or greater)\");\n    }\n    if (courseData.originalPrice > 0 && courseData.price > courseData.originalPrice) {\n        errors.push(\"Price cannot be greater than original price\");\n    }\n    return {\n        isValid: errors.length === 0,\n        errors\n    };\n};\nclass CourseService {\n    // Create a new course\n    static async createCourse(courseData) {\n        try {\n            var _courseData_title, _courseData_slug, _courseData_title1, _courseData_shortDescription, _courseData_category, _courseData_language, _courseData_duration, _courseData_hours, _courseData_programBy, _courseData_paymentLink, _courseData_backgroundImage, _courseData_certificateImage, _courseData_globalStatus, _courseData_startDate;\n            // Validate course data\n            const validation = validateCourseData(courseData);\n            if (!validation.isValid) {\n                return {\n                    success: false,\n                    error: \"Validation failed: \".concat(validation.errors.join(\", \"))\n                };\n            }\n            const courseId = (0,uuid__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\n            const courseWithMetadata = {\n                ...courseData,\n                _id: courseId,\n                createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)(),\n                updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)(),\n                status: courseData.status || \"draft\",\n                // Ensure these fields are numbers\n                rating: Number(courseData.rating) || 0,\n                totalRatings: Number(courseData.totalRatings) || 0,\n                enrolledStudents: Number(courseData.enrolledStudents) || 0,\n                price: Number(courseData.price) || 0,\n                originalPrice: Number(courseData.originalPrice) || 0,\n                // Ensure arrays are properly initialized\n                learningOutcomes: Array.isArray(courseData.learningOutcomes) ? courseData.learningOutcomes.filter((item)=>item && item.trim()) : [],\n                features: Array.isArray(courseData.features) ? courseData.features.filter((item)=>item && item.trim()) : [],\n                skills: Array.isArray(courseData.skills) ? courseData.skills.filter((item)=>item && item.trim()) : [],\n                requirements: Array.isArray(courseData.requirements) ? courseData.requirements.filter((item)=>item && item.trim()) : [],\n                module: Array.isArray(courseData.module) ? courseData.module : [],\n                highlights: Array.isArray(courseData.highlights) ? courseData.highlights : [],\n                project: Array.isArray(courseData.project) ? courseData.project : [],\n                programFor: Array.isArray(courseData.programFor) ? courseData.programFor : [],\n                // Ensure strings are not undefined\n                title: ((_courseData_title = courseData.title) === null || _courseData_title === void 0 ? void 0 : _courseData_title.trim()) || \"\",\n                slug: ((_courseData_slug = courseData.slug) === null || _courseData_slug === void 0 ? void 0 : _courseData_slug.trim()) || ((_courseData_title1 = courseData.title) === null || _courseData_title1 === void 0 ? void 0 : _courseData_title1.toLowerCase().replace(/\\s+/g, \"-\").replace(/[^a-z0-9-]/g, \"\")) || \"\",\n                shortDescription: ((_courseData_shortDescription = courseData.shortDescription) === null || _courseData_shortDescription === void 0 ? void 0 : _courseData_shortDescription.trim()) || \"\",\n                category: ((_courseData_category = courseData.category) === null || _courseData_category === void 0 ? void 0 : _courseData_category.trim()) || \"\",\n                level: courseData.level || \"beginner\",\n                language: ((_courseData_language = courseData.language) === null || _courseData_language === void 0 ? void 0 : _courseData_language.trim()) || \"\",\n                duration: ((_courseData_duration = courseData.duration) === null || _courseData_duration === void 0 ? void 0 : _courseData_duration.trim()) || \"\",\n                hours: ((_courseData_hours = courseData.hours) === null || _courseData_hours === void 0 ? void 0 : _courseData_hours.trim()) || \"\",\n                programBy: ((_courseData_programBy = courseData.programBy) === null || _courseData_programBy === void 0 ? void 0 : _courseData_programBy.trim()) || \"Admin\",\n                lastUpdated: courseData.lastUpdated || new Date().toISOString(),\n                paymentLink: ((_courseData_paymentLink = courseData.paymentLink) === null || _courseData_paymentLink === void 0 ? void 0 : _courseData_paymentLink.trim()) || \"\",\n                backgroundImage: ((_courseData_backgroundImage = courseData.backgroundImage) === null || _courseData_backgroundImage === void 0 ? void 0 : _courseData_backgroundImage.trim()) || \"\",\n                certificateImage: ((_courseData_certificateImage = courseData.certificateImage) === null || _courseData_certificateImage === void 0 ? void 0 : _courseData_certificateImage.trim()) || \"\",\n                globalStatus: ((_courseData_globalStatus = courseData.globalStatus) === null || _courseData_globalStatus === void 0 ? void 0 : _courseData_globalStatus.trim()) || \"\",\n                startDate: ((_courseData_startDate = courseData.startDate) === null || _courseData_startDate === void 0 ? void 0 : _courseData_startDate.trim()) || \"\",\n                // Ensure toolsData has proper structure\n                toolsData: courseData.toolsData || {\n                    sectionTitle: \"\",\n                    category: \"\",\n                    toolsCount: \"0\",\n                    displayImage: \"\",\n                    tools: []\n                }\n            };\n            // Clean the data before sending\n            const cleanedData = cleanCourseData(courseWithMetadata);\n            console.log(\"Creating course with cleaned data:\", {\n                title: cleanedData.title,\n                status: cleanedData.status,\n                price: cleanedData.price\n            });\n            const docRef = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_2__.db, COLLECTION_NAME), cleanedData);\n            const createdCourse = {\n                ...cleanedData,\n                createdAt: new Date(),\n                updatedAt: new Date()\n            };\n            return {\n                success: true,\n                data: createdCourse\n            };\n        } catch (error) {\n            console.error(\"Error creating course:\", error);\n            const errorMessage = (0,_firebase__WEBPACK_IMPORTED_MODULE_2__.handleFirestoreError)(error);\n            return {\n                success: false,\n                error: errorMessage\n            };\n        }\n    }\n    // Get all courses with optional pagination and filtering\n    static async getAllCourses(options) {\n        try {\n            let q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_2__.db, COLLECTION_NAME));\n            // Add filters\n            if (options === null || options === void 0 ? void 0 : options.status) {\n                q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(q, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"status\", \"==\", options.status));\n            }\n            if (options === null || options === void 0 ? void 0 : options.category) {\n                q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(q, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"category\", \"==\", options.category));\n            }\n            // Add ordering\n            q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(q, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.orderBy)(\"createdAt\", \"desc\"));\n            // Add pagination\n            if (options === null || options === void 0 ? void 0 : options.pageSize) {\n                q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(q, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.limit)(options.pageSize));\n            }\n            if (options === null || options === void 0 ? void 0 : options.lastDoc) {\n                q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(q, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.startAfter)(options.lastDoc));\n            }\n            const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n            const courses = [];\n            querySnapshot.forEach((doc)=>{\n                var _data_createdAt, _data_updatedAt;\n                const data = doc.data();\n                const course = {\n                    ...data,\n                    createdAt: ((_data_createdAt = data.createdAt) === null || _data_createdAt === void 0 ? void 0 : _data_createdAt.toDate()) || new Date(),\n                    updatedAt: ((_data_updatedAt = data.updatedAt) === null || _data_updatedAt === void 0 ? void 0 : _data_updatedAt.toDate()) || new Date(),\n                    // Ensure required fields have default values\n                    rating: Number(data.rating) || 0,\n                    totalRatings: Number(data.totalRatings) || 0,\n                    enrolledStudents: Number(data.enrolledStudents) || 0,\n                    price: Number(data.price) || 0,\n                    originalPrice: Number(data.originalPrice) || 0,\n                    learningOutcomes: Array.isArray(data.learningOutcomes) ? data.learningOutcomes : [],\n                    features: Array.isArray(data.features) ? data.features : [],\n                    skills: Array.isArray(data.skills) ? data.skills : [],\n                    requirements: Array.isArray(data.requirements) ? data.requirements : [],\n                    module: Array.isArray(data.module) ? data.module : [],\n                    highlights: Array.isArray(data.highlights) ? data.highlights : [],\n                    project: Array.isArray(data.project) ? data.project : [],\n                    programFor: Array.isArray(data.programFor) ? data.programFor : [],\n                    toolsData: data.toolsData || {\n                        sectionTitle: \"\",\n                        category: \"\",\n                        toolsCount: \"0\",\n                        displayImage: \"\",\n                        tools: []\n                    }\n                };\n                // Apply search filter on client side (for simplicity)\n                if (options === null || options === void 0 ? void 0 : options.searchTerm) {\n                    const searchLower = options.searchTerm.toLowerCase();\n                    const matchesSearch = course.title.toLowerCase().includes(searchLower) || course.category.toLowerCase().includes(searchLower) || course.shortDescription.toLowerCase().includes(searchLower) || course.programBy.toLowerCase().includes(searchLower);\n                    if (matchesSearch) {\n                        courses.push(course);\n                    }\n                } else {\n                    courses.push(course);\n                }\n            });\n            return {\n                success: true,\n                data: courses,\n                pagination: {\n                    total: courses.length,\n                    page: 1,\n                    pages: 1\n                }\n            };\n        } catch (error) {\n            console.error(\"Error fetching courses:\", error);\n            const errorMessage = (0,_firebase__WEBPACK_IMPORTED_MODULE_2__.handleFirestoreError)(error);\n            return {\n                success: false,\n                error: errorMessage\n            };\n        }\n    }\n    // Get course by ID\n    static async getCourseById(courseId) {\n        try {\n            var _data_createdAt, _data_updatedAt;\n            if (!courseId || courseId.trim() === \"\") {\n                return {\n                    success: false,\n                    error: \"Course ID is required\"\n                };\n            }\n            const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_2__.db, COLLECTION_NAME), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"_id\", \"==\", courseId));\n            const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n            if (querySnapshot.empty) {\n                return {\n                    success: false,\n                    error: \"Course not found\"\n                };\n            }\n            const doc = querySnapshot.docs[0];\n            const data = doc.data();\n            const course = {\n                ...data,\n                createdAt: ((_data_createdAt = data.createdAt) === null || _data_createdAt === void 0 ? void 0 : _data_createdAt.toDate()) || new Date(),\n                updatedAt: ((_data_updatedAt = data.updatedAt) === null || _data_updatedAt === void 0 ? void 0 : _data_updatedAt.toDate()) || new Date(),\n                // Ensure required fields have default values\n                rating: Number(data.rating) || 0,\n                totalRatings: Number(data.totalRatings) || 0,\n                enrolledStudents: Number(data.enrolledStudents) || 0,\n                price: Number(data.price) || 0,\n                originalPrice: Number(data.originalPrice) || 0,\n                learningOutcomes: Array.isArray(data.learningOutcomes) ? data.learningOutcomes : [],\n                features: Array.isArray(data.features) ? data.features : [],\n                skills: Array.isArray(data.skills) ? data.skills : [],\n                requirements: Array.isArray(data.requirements) ? data.requirements : [],\n                module: Array.isArray(data.module) ? data.module : [],\n                highlights: Array.isArray(data.highlights) ? data.highlights : [],\n                project: Array.isArray(data.project) ? data.project : [],\n                programFor: Array.isArray(data.programFor) ? data.programFor : [],\n                toolsData: data.toolsData || {\n                    sectionTitle: \"\",\n                    category: \"\",\n                    toolsCount: \"0\",\n                    displayImage: \"\",\n                    tools: []\n                }\n            };\n            return {\n                success: true,\n                data: course\n            };\n        } catch (error) {\n            console.error(\"Error fetching course:\", error);\n            const errorMessage = (0,_firebase__WEBPACK_IMPORTED_MODULE_2__.handleFirestoreError)(error);\n            return {\n                success: false,\n                error: errorMessage\n            };\n        }\n    }\n    // Get course by slug\n    static async getCourseBySlug(slug) {\n        try {\n            var _data_createdAt, _data_updatedAt;\n            if (!slug || slug.trim() === \"\") {\n                return {\n                    success: false,\n                    error: \"Course slug is required\"\n                };\n            }\n            const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_2__.db, COLLECTION_NAME), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"slug\", \"==\", slug));\n            const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n            if (querySnapshot.empty) {\n                return {\n                    success: false,\n                    error: \"Course not found\"\n                };\n            }\n            const doc = querySnapshot.docs[0];\n            const data = doc.data();\n            const course = {\n                ...data,\n                createdAt: ((_data_createdAt = data.createdAt) === null || _data_createdAt === void 0 ? void 0 : _data_createdAt.toDate()) || new Date(),\n                updatedAt: ((_data_updatedAt = data.updatedAt) === null || _data_updatedAt === void 0 ? void 0 : _data_updatedAt.toDate()) || new Date()\n            };\n            return {\n                success: true,\n                data: course\n            };\n        } catch (error) {\n            console.error(\"Error fetching course by slug:\", error);\n            const errorMessage = (0,_firebase__WEBPACK_IMPORTED_MODULE_2__.handleFirestoreError)(error);\n            return {\n                success: false,\n                error: errorMessage\n            };\n        }\n    }\n    // Update course\n    static async updateCourse(courseId, courseData) {\n        try {\n            if (!courseId || courseId.trim() === \"\") {\n                return {\n                    success: false,\n                    error: \"Course ID is required\"\n                };\n            }\n            // Validate updated data if it contains required fields\n            if (courseData.title || courseData.shortDescription || courseData.category) {\n                const validation = validateCourseData({\n                    title: courseData.title || \"temp\",\n                    shortDescription: courseData.shortDescription || \"temp\",\n                    category: courseData.category || \"temp\",\n                    level: courseData.level || \"beginner\",\n                    language: courseData.language || \"temp\",\n                    duration: courseData.duration || \"temp\",\n                    hours: courseData.hours || \"temp\",\n                    price: courseData.price || 0,\n                    originalPrice: courseData.originalPrice || 0\n                });\n                if (!validation.isValid) {\n                    return {\n                        success: false,\n                        error: \"Validation failed: \".concat(validation.errors.join(\", \"))\n                    };\n                }\n            }\n            const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_2__.db, COLLECTION_NAME), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"_id\", \"==\", courseId));\n            const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n            if (querySnapshot.empty) {\n                return {\n                    success: false,\n                    error: \"Course not found\"\n                };\n            }\n            const docRef = querySnapshot.docs[0].ref;\n            const updateData = {\n                ...courseData,\n                updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)(),\n                lastUpdated: new Date().toISOString(),\n                // Ensure numeric fields are properly typed\n                ...courseData.rating !== undefined && {\n                    rating: Number(courseData.rating)\n                },\n                ...courseData.totalRatings !== undefined && {\n                    totalRatings: Number(courseData.totalRatings)\n                },\n                ...courseData.enrolledStudents !== undefined && {\n                    enrolledStudents: Number(courseData.enrolledStudents)\n                },\n                ...courseData.price !== undefined && {\n                    price: Number(courseData.price)\n                },\n                ...courseData.originalPrice !== undefined && {\n                    originalPrice: Number(courseData.originalPrice)\n                },\n                // Ensure arrays are properly filtered\n                ...courseData.learningOutcomes && {\n                    learningOutcomes: Array.isArray(courseData.learningOutcomes) ? courseData.learningOutcomes.filter((item)=>item && item.trim()) : []\n                },\n                ...courseData.features && {\n                    features: Array.isArray(courseData.features) ? courseData.features.filter((item)=>item && item.trim()) : []\n                },\n                ...courseData.skills && {\n                    skills: Array.isArray(courseData.skills) ? courseData.skills.filter((item)=>item && item.trim()) : []\n                },\n                ...courseData.requirements && {\n                    requirements: Array.isArray(courseData.requirements) ? courseData.requirements.filter((item)=>item && item.trim()) : []\n                },\n                // Update slug if title changed\n                ...courseData.title && {\n                    slug: courseData.title.toLowerCase().replace(/\\s+/g, \"-\").replace(/[^a-z0-9-]/g, \"\")\n                }\n            };\n            // Clean the data before sending\n            const cleanedData = cleanCourseData(updateData);\n            console.log(\"Updating course with cleaned data:\", {\n                courseId,\n                fieldsUpdated: Object.keys(cleanedData)\n            });\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(docRef, cleanedData);\n            // Fetch the updated course\n            const updatedCourseResponse = await this.getCourseById(courseId);\n            if (updatedCourseResponse.success) {\n                return updatedCourseResponse;\n            } else {\n                return {\n                    success: true,\n                    data: {\n                        ...courseData,\n                        _id: courseId,\n                        updatedAt: new Date()\n                    }\n                };\n            }\n        } catch (error) {\n            console.error(\"Error updating course:\", error);\n            const errorMessage = (0,_firebase__WEBPACK_IMPORTED_MODULE_2__.handleFirestoreError)(error);\n            return {\n                success: false,\n                error: errorMessage\n            };\n        }\n    }\n    // Delete course\n    static async deleteCourse(courseId) {\n        try {\n            if (!courseId || courseId.trim() === \"\") {\n                return {\n                    success: false,\n                    error: \"Course ID is required\"\n                };\n            }\n            const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_2__.db, COLLECTION_NAME), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"_id\", \"==\", courseId));\n            const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n            if (querySnapshot.empty) {\n                return {\n                    success: false,\n                    error: \"Course not found\"\n                };\n            }\n            const docRef = querySnapshot.docs[0].ref;\n            const courseData = querySnapshot.docs[0].data();\n            // Delete associated images from storage\n            if (courseData.backgroundImage) {\n                try {\n                    await this.deleteImage(courseData.backgroundImage);\n                } catch (imageError) {\n                    console.warn(\"Failed to delete background image:\", imageError);\n                }\n            }\n            if (courseData.certificateImage) {\n                try {\n                    await this.deleteImage(courseData.certificateImage);\n                } catch (imageError) {\n                    console.warn(\"Failed to delete certificate image:\", imageError);\n                }\n            }\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.deleteDoc)(docRef);\n            console.log(\"Course deleted successfully:\", courseId);\n            return {\n                success: true\n            };\n        } catch (error) {\n            console.error(\"Error deleting course:\", error);\n            const errorMessage = (0,_firebase__WEBPACK_IMPORTED_MODULE_2__.handleFirestoreError)(error);\n            return {\n                success: false,\n                error: errorMessage\n            };\n        }\n    }\n    // Bulk delete courses\n    static async deleteCourses(courseIds) {\n        try {\n            if (!courseIds || courseIds.length === 0) {\n                return {\n                    success: false,\n                    error: \"Course IDs are required\"\n                };\n            }\n            const batch = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.writeBatch)(_firebase__WEBPACK_IMPORTED_MODULE_2__.db);\n            let deletedCount = 0;\n            for (const courseId of courseIds){\n                const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_2__.db, COLLECTION_NAME), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"_id\", \"==\", courseId));\n                const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n                if (!querySnapshot.empty) {\n                    const docRef = querySnapshot.docs[0].ref;\n                    batch.delete(docRef);\n                    deletedCount++;\n                }\n            }\n            if (deletedCount === 0) {\n                return {\n                    success: false,\n                    error: \"No courses found to delete\"\n                };\n            }\n            await batch.commit();\n            return {\n                success: true,\n                deletedCount\n            };\n        } catch (error) {\n            console.error(\"Error bulk deleting courses:\", error);\n            const errorMessage = (0,_firebase__WEBPACK_IMPORTED_MODULE_2__.handleFirestoreError)(error);\n            return {\n                success: false,\n                error: errorMessage\n            };\n        }\n    }\n    // Upload image with better error handling and optimization\n    static async uploadImage(file, path) {\n        try {\n            var _file_name_split_pop;\n            // Validate file\n            if (!file) {\n                return {\n                    success: false,\n                    error: \"No file provided\"\n                };\n            }\n            if (file.size > 5 * 1024 * 1024) {\n                return {\n                    success: false,\n                    error: \"File size must be less than 5MB\"\n                };\n            }\n            const allowedTypes = [\n                \"image/jpeg\",\n                \"image/jpg\",\n                \"image/png\",\n                \"image/webp\",\n                \"image/gif\"\n            ];\n            if (!allowedTypes.includes(file.type)) {\n                return {\n                    success: false,\n                    error: \"Only JPEG, PNG, WebP, and GIF images are allowed\"\n                };\n            }\n            // Generate unique filename\n            const timestamp = Date.now();\n            const randomString = Math.random().toString(36).substring(2, 15);\n            const fileExtension = ((_file_name_split_pop = file.name.split(\".\").pop()) === null || _file_name_split_pop === void 0 ? void 0 : _file_name_split_pop.toLowerCase()) || \"jpg\";\n            const filename = \"\".concat(timestamp, \"_\").concat(randomString, \".\").concat(fileExtension);\n            const storageRef = (0,firebase_storage__WEBPACK_IMPORTED_MODULE_1__.ref)(_firebase__WEBPACK_IMPORTED_MODULE_2__.storage, \"\".concat(path, \"/\").concat(filename));\n            console.log(\"Uploading image:\", filename, \"Size:\", file.size);\n            // Upload with metadata\n            const metadata = {\n                contentType: file.type,\n                customMetadata: {\n                    uploadedAt: new Date().toISOString(),\n                    originalName: file.name\n                }\n            };\n            const snapshot = await (0,firebase_storage__WEBPACK_IMPORTED_MODULE_1__.uploadBytes)(storageRef, file, metadata);\n            const downloadURL = await (0,firebase_storage__WEBPACK_IMPORTED_MODULE_1__.getDownloadURL)(snapshot.ref);\n            console.log(\"Image uploaded successfully:\", downloadURL);\n            return {\n                success: true,\n                url: downloadURL\n            };\n        } catch (error) {\n            console.error(\"Error uploading image:\", error);\n            return {\n                success: false,\n                error: error.message || \"Failed to upload image\"\n            };\n        }\n    }\n    // Delete image from storage\n    static async deleteImage(imageUrl) {\n        try {\n            if (!imageUrl || !imageUrl.includes(\"firebase\")) {\n                return {\n                    success: false,\n                    error: \"Invalid image URL\"\n                };\n            }\n            const imageRef = (0,firebase_storage__WEBPACK_IMPORTED_MODULE_1__.ref)(_firebase__WEBPACK_IMPORTED_MODULE_2__.storage, imageUrl);\n            await (0,firebase_storage__WEBPACK_IMPORTED_MODULE_1__.deleteObject)(imageRef);\n            console.log(\"Image deleted successfully:\", imageUrl);\n            return {\n                success: true\n            };\n        } catch (error) {\n            console.error(\"Error deleting image:\", error);\n            return {\n                success: false,\n                error: error.message || \"Failed to delete image\"\n            };\n        }\n    }\n    // Get courses by category\n    static async getCoursesByCategory(category, pageSize) {\n        try {\n            if (!category || category.trim() === \"\") {\n                return {\n                    success: false,\n                    error: \"Category is required\"\n                };\n            }\n            let q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_2__.db, COLLECTION_NAME), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"category\", \"==\", category), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"status\", \"==\", \"published\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.orderBy)(\"createdAt\", \"desc\"));\n            if (pageSize) {\n                q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(q, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.limit)(pageSize));\n            }\n            const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n            const courses = [];\n            querySnapshot.forEach((doc)=>{\n                var _data_createdAt, _data_updatedAt;\n                const data = doc.data();\n                courses.push({\n                    ...data,\n                    createdAt: ((_data_createdAt = data.createdAt) === null || _data_createdAt === void 0 ? void 0 : _data_createdAt.toDate()) || new Date(),\n                    updatedAt: ((_data_updatedAt = data.updatedAt) === null || _data_updatedAt === void 0 ? void 0 : _data_updatedAt.toDate()) || new Date()\n                });\n            });\n            return {\n                success: true,\n                data: courses\n            };\n        } catch (error) {\n            console.error(\"Error fetching courses by category:\", error);\n            const errorMessage = (0,_firebase__WEBPACK_IMPORTED_MODULE_2__.handleFirestoreError)(error);\n            return {\n                success: false,\n                error: errorMessage\n            };\n        }\n    }\n    // Get published courses only\n    static async getPublishedCourses(pageSize) {\n        return this.getAllCourses({\n            status: \"published\",\n            pageSize: pageSize || 50\n        });\n    }\n    // Get draft courses only\n    static async getDraftCourses(pageSize) {\n        return this.getAllCourses({\n            status: \"draft\",\n            pageSize: pageSize || 50\n        });\n    }\n    // Search courses\n    static async searchCourses(searchTerm, options) {\n        try {\n            if (!searchTerm || searchTerm.trim() === \"\") {\n                return this.getAllCourses(options);\n            }\n            return this.getAllCourses({\n                ...options,\n                searchTerm: searchTerm.trim()\n            });\n        } catch (error) {\n            console.error(\"Error searching courses:\", error);\n            const errorMessage = (0,_firebase__WEBPACK_IMPORTED_MODULE_2__.handleFirestoreError)(error);\n            return {\n                success: false,\n                error: errorMessage\n            };\n        }\n    }\n    // Get course statistics\n    static async getCourseStats() {\n        try {\n            const response = await this.getAllCourses();\n            if (!response.success || !response.data) {\n                return {\n                    success: false,\n                    error: response.error || \"Failed to fetch courses for statistics\"\n                };\n            }\n            const courses = response.data;\n            const stats = {\n                totalCourses: courses.length,\n                publishedCourses: courses.filter((c)=>c.status === \"published\").length,\n                draftCourses: courses.filter((c)=>c.status === \"draft\").length,\n                totalStudents: courses.reduce((sum, c)=>sum + (c.enrolledStudents || 0), 0),\n                totalRevenue: courses.reduce((sum, c)=>sum + (c.price || 0) * (c.enrolledStudents || 0), 0),\n                categories: {},\n                levels: {}\n            };\n            // Calculate category distribution\n            courses.forEach((course)=>{\n                if (course.category) {\n                    stats.categories[course.category] = (stats.categories[course.category] || 0) + 1;\n                }\n            });\n            // Calculate level distribution\n            courses.forEach((course)=>{\n                if (course.level) {\n                    stats.levels[course.level] = (stats.levels[course.level] || 0) + 1;\n                }\n            });\n            return {\n                success: true,\n                data: stats\n            };\n        } catch (error) {\n            console.error(\"Error fetching course statistics:\", error);\n            const errorMessage = (0,_firebase__WEBPACK_IMPORTED_MODULE_2__.handleFirestoreError)(error);\n            return {\n                success: false,\n                error: errorMessage\n            };\n        }\n    }\n    // Update course status (publish/unpublish)\n    static async updateCourseStatus(courseId, status) {\n        try {\n            if (!courseId || courseId.trim() === \"\") {\n                return {\n                    success: false,\n                    error: \"Course ID is required\"\n                };\n            }\n            if (![\n                \"draft\",\n                \"published\"\n            ].includes(status)) {\n                return {\n                    success: false,\n                    error: 'Status must be either \"draft\" or \"published\"'\n                };\n            }\n            return this.updateCourse(courseId, {\n                status,\n                lastUpdated: new Date().toISOString()\n            });\n        } catch (error) {\n            console.error(\"Error updating course status:\", error);\n            const errorMessage = (0,_firebase__WEBPACK_IMPORTED_MODULE_2__.handleFirestoreError)(error);\n            return {\n                success: false,\n                error: errorMessage\n            };\n        }\n    }\n    // Duplicate course\n    static async duplicateCourse(courseId, newTitle) {\n        try {\n            const originalCourse = await this.getCourseById(courseId);\n            if (!originalCourse.success || !originalCourse.data) {\n                return {\n                    success: false,\n                    error: originalCourse.error || \"Original course not found\"\n                };\n            }\n            const course = originalCourse.data;\n            const duplicatedCourse = {\n                ...course,\n                title: newTitle || \"\".concat(course.title, \" (Copy)\"),\n                slug: (newTitle || \"\".concat(course.title, \" (Copy)\")).toLowerCase().replace(/\\s+/g, \"-\").replace(/[^a-z0-9-]/g, \"\"),\n                status: \"draft\",\n                enrolledStudents: 0,\n                rating: 0,\n                totalRatings: 0,\n                lastUpdated: new Date().toISOString()\n            };\n            // Remove fields that shouldn't be duplicated\n            delete duplicatedCourse._id;\n            delete duplicatedCourse.createdAt;\n            delete duplicatedCourse.updatedAt;\n            return this.createCourse(duplicatedCourse);\n        } catch (error) {\n            console.error(\"Error duplicating course:\", error);\n            const errorMessage = (0,_firebase__WEBPACK_IMPORTED_MODULE_2__.handleFirestoreError)(error);\n            return {\n                success: false,\n                error: errorMessage\n            };\n        }\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/courseService.ts\n"));

/***/ })

});